Microsoft (R) Macro Assembler Version 14.14.26428.1	    05/17/18 17:52:33
Assembly x86 Calculato					     Page 1 - 1


				TITLE			Assembly x86 Calculator;											//The Title.

				INCLUDE			Irvine32.inc;														//Includes the Irvine32 Library.
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
				;																					//Strings:
 00000000 4F 70 65 72 61	prompt_1		BYTE	"Operation: ",												0;	//Prompt for operation.
	   74 69 6F 6E 3A
	   20 00
 0000000C 46 69 72 73 74	prompt_2		BYTE	"First Number:  ",											0;	//Prompt for first number.
	   20 4E 75 6D 62
	   65 72 3A 20 20
	   00
 0000001C 53 65 63 6F 6E	prompt_3		BYTE	"Second Number: ",											0;	//Prompt for second number.
	   64 20 4E 75 6D
	   62 65 72 3A 20
	   00
 0000002C 4E 75 6D 62 65	prompt_4		BYTE	"Number: ",													0;	//Prompt for prime number generation.
	   72 3A 20 00
 00000035 57 6F 75 6C 64	loop_prompt		BYTE	"Would you like to loop again? 1 for YES or 0 for NO: ",	0;	//Prompt for loop.
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 6C 6F
	   6F 70 20 61 67
	   61 69 6E 3F 20
	   31 20 66 6F 72
	   20 59 45 53 20
	   6F 72 20 30 20
	   66 6F 72 20 4E
	   4F 3A 20 00
 0000006B 49 6E 76 61 6C	invalid			BYTE	"Invalid input.",											0;	//Invalid input.
	   69 64 20 69 6E
	   70 75 74 2E 00
 0000007A 4E 75 6D 62 65	cannotDivide	BYTE	"Numbers cannot be negative or zero.",						0;	//Cannot divide numbers error.
	   72 73 20 63 61
	   6E 6E 6F 74 20
	   62 65 20 6E 65
	   67 61 74 69 76
	   65 20 6F 72 20
	   7A 65 72 6F 2E
	   00
 0000009E 49 6E 70 75 74	numberTooLarge	BYTE	"Inputted number too large.",								0;	//Number too large error.
	   74 65 64 20 6E
	   75 6D 62 65 72
	   20 74 6F 6F 20
	   6C 61 72 67 65
	   2E 00
 000000B9 47 6F 6F 64 62	goodbye			BYTE	"Goodbye.",													0;	//Goodbye message.
	   79 65 2E 00

 000000C2 20 3D 20 00		equals			BYTE	" = ",		0;													//String for equals symbol.
 000000C6 20 2B 20 00		sum				BYTE	" + ",		0;													//String for addition symbol.
 000000CA 20 2D 20 00		diff			BYTE	" - ",		0;													//String for subtraction symbol.
 000000CE 20 2A 20 00		multi			BYTE	" * ",		0;													//String for multiplication symbol.
 000000D2 20 2F 20 00		divi			BYTE	" / ",		0;													//String for division symbol.
 000000D6 2E 00			dot				BYTE	"."	 ,		0;													//String for decimal point.

				;																					//Predefined values:
 000000D8 00000005		totalOpts		DWORD	5			;													//The number of operations.
 000000DC 00000004		binaryOpts		DWORD	4			;													//The number of binary operations.
 000000E0 000F4240		precision		DWORD	1000000		;													//The precision of the floating point number result.

				;																					//For Prime number generation.
 = 0007A120			arraySize		EQU		500000				;										//The maximum anount of primes that can be generated.
 000000E4  0007A120 [		array1			dd		arraySize	dup(0)	;										//The array of numbers to calculate primes.
	    00000000
	   ]

				;																					//User inputted data:
 001E8564 00000000		opt				DWORD	?			;													//The operator.
 001E8568 00000000		num				DWORD	?			;													//The number (unary operations).
 001E856C 00000000		firstNum		DWORD	?			;													//The first number (binary operations).
 001E8570 00000000		secondNum		DWORD	?			;													//The second number (binary operations).
				;																					//Calculated results:
 001E8574 00000000		bigInt			DWORD	0			;													//The floating point number multiplied by precision.
 001E8578 00000000		result			DWORD	?			;													//The Result.
 001E857C 00000000		resultDiv		REAL4	?			;													//The Result of division.
 001E8580 00000000		firstPart		DWORD	?			;													//The part of the quotient before the decimal place.
 001E8584 00000000		secondPart		DWORD	?			;													//The part of the quotient after the decimal place.
 001E8588 00000000		remainder		DWORD	?			;													//The remainder of the first part of the quotient.
 001E858C 00000000		temp			DWORD	?			;													//Temporary value used in the calculation of the second part of the quotient.

 00000000			.code

 00000000			main	PROC;																		//The main procedure.
					
 00000000				ReadInput:;																		//Reading data:
 00000000				GetOperation:;																	//Read Operation:
 00000000  BA 00000000 R			MOV		edx,				offset prompt_1;									//Move memory address of prompt_3 in register edx.
 00000005  E8 00000000 E			CALL	WriteString;															//Writes the String in register edx.
 0000000A  E8 00000000 E			CALL	ReadInt;																//Reads an integer to register eax.
 0000000F  A3 001E8564 R			MOV		opt,				eax;												//Stores value of eax in opt.	


 00000014				CheckOperator:;																	//Check the operator:
 00000014  A1 001E8564 R			MOV		eax,				opt;												//Move value of opt in register eax.
 00000019  8B 1D 000000D8 R			MOV		ebx,				totalOpts;											//Move value of totalOpts in register ebx.
 0000001F  8B 0D 000000DC R			MOV		ecx,				binaryOpts;											//Move value of binaryOpts in register ecx.
 00000025  BA 0000006B R			MOV		edx,				offset invalid;										//Move memory address of invalid in register edx.
				;																					//Check if opt is within bounds.
 0000002A  83 F8 00				CMP		eax,				0;													//Compare eax to 0.
 0000002D  0F 8E 0000030E			JLE		InvalidResponse;														//Jump to InvalidResponse if less than or equal to 0.
 00000033  3B C3				CMP		eax,				ebx;												//Compare eax to ebx.
 00000035  0F 8F 00000306			JG		InvalidResponse;														//Jump to InvalidResponse if greater than ebx.
				;																					//Checks if opt is binary or unary operation:
 0000003B  3B C1				CMP		eax,				ecx;												//Compare eax to ebx.
 0000003D  7E 24				JLE		BinaryOperations;														//Jump to BinaryOperations if less than or equal to ecx.
 0000003F  7F 00				JG		UnaryOperations;														//Jump to UnaryOperations if greater than ecx.

 00000041				UnaryOperations:;																//Unary calculator operations:
				;																					//Get Number:
 00000041  BA 0000002C R			MOV		edx,				offset prompt_4;									//Move memory address of prompt_1 in register edx.
 00000046  E8 00000000 E			CALL	WriteString;															//Writes the String in register edx.
 0000004B  E8 00000000 E			CALL	ReadInt;																//Reads an integer to register eax.
 00000050  A3 001E8568 R			MOV		num,				eax;												//Stores value of eax in num.
				;																					//Jump to operation:
 00000055  A1 001E8564 R			MOV		eax,				opt;												//Move value of opt in register eax.

 0000005A  83 F8 05				CMP		eax,				5;													//Compare eax to 5.
 0000005D  0F 84 000001FA			JE		PrimeNumbers;															//Jump to PrimeNumbers if equal to 5.

 00000063				BinaryOperations:;																//Binary calculator operations:
				;																					//Get first number:
 00000063  BA 0000000C R			MOV		edx,				offset prompt_2;									//Move memory address of prompt_1 in register edx.
 00000068  E8 00000000 E			CALL	WriteString;															//Writes the String in register edx.
 0000006D  E8 00000000 E			CALL	ReadInt;																//Reads an integer to register eax.
 00000072  A3 001E856C R			MOV		firstNum,			eax;												//Stores value of eax in firstNum.
				;																					//Get second number:
 00000077  BA 0000001C R			MOV		edx,				offset prompt_3;									//Move memory address of prompt_2 in register edx.
 0000007C  E8 00000000 E			CALL	WriteString;															//Writes the String in register edx.
 00000081  E8 00000000 E			CALL	ReadInt;																//Reads an integer to register eax.
 00000086  A3 001E8570 R			mov		secondNum,			eax;												//Stores value of eax in secondNum.
				;																						//Jump to operation:
 0000008B  A1 001E8564 R			MOV		eax,				opt;												//Move value of opt in register eax.

 00000090  83 F8 01				CMP		eax,				1;													//Compare eax to 1.
 00000093  74 17				JE		Addition;																//Jump to Addition if equal to 1.
 00000095  83 F8 02				CMP		eax,				2;													//Compare eax to 2.
 00000098  74 5E				JE		Subtraction;															//Jump to Subtraction if equal to 2.
 0000009A  83 F8 03				CMP		eax,				3;													//Compare eax to 3.
 0000009D  0F 84 000000A1			JE		Multiplication;															//Jump to Multiplication if equal to 3.
 000000A3  83 F8 04				CMP		eax,				4;													//Compare eax to 4.
 000000A6  0F 84 000000E6			JE		Division;																//Jump to Division if equal to 4.

 000000AC				Addition:;																		//Addition (1):
				;																					//Calculation:
 000000AC  A1 001E856C R			MOV		eax,				firstNum;											//Move value of firstNum in register eax.
 000000B1  03 05 001E8570 R			ADD		eax,				secondNum;											//Adds the value of secondNum to register eax.
 000000B7  A3 001E8578 R			MOV		result,				eax;												//Stores value of eax in result.
				;																					//Print equation:
 000000BC  A1 001E856C R			MOV		eax,				firstNum;											//Move value of firstNum in register eax.
 000000C1  E8 00000000 E			CALL	WriteInt;																//Writes the integer in register eax.
 000000C6  BA 000000C6 R			MOV		edx,				offset sum;											//Move memory address of sum in register edx.
 000000CB  E8 00000000 E			CALL	WriteString;															//Writes the String in register edx.
 000000D0  A1 001E8570 R			MOV		eax,				secondNum;											//Move value of secondNum in register eax.
 000000D5  E8 00000000 E			CALL	WriteInt;																//Writes the integer in register eax.
 000000DA  BA 000000C2 R			MOV		edx,				offset equals;										//Move memory address of equals in register edx.
 000000DF  E8 00000000 E			CALL	WriteString;															//Writes the String in register edx.
				;																					//Print result:
 000000E4  A1 001E8578 R			MOV		eax,				result;												//Move value of result in register eax.
 000000E9  E8 00000000 E			CALL	WriteInt;																//Writes the integer in register eax.
				;																					//Jump to loop.
 000000EE  E8 00000000 E			CALL	CrLf;																	//New Line.
 000000F3  E9 00000223				JMP		JumpToLoop;																//Jump to JumpToLoop.

 000000F8				Subtraction:;																	//Subtraction (2):
				;																					//Calculation:
 000000F8  A1 001E856C R			MOV		eax,				firstNum;											//Move value of firstNum in register eax.
 000000FD  2B 05 001E8570 R			SUB		eax,				secondNum;											//Subtracts the value of secondNum from register eax.
 00000103  A3 001E8578 R			MOV		result,				eax;												//Stores value of eax in result.
				;																						//Print equation:
 00000108  A1 001E856C R			MOV		eax,				firstNum;											//Move value of firstNum in register eax.
 0000010D  E8 00000000 E			CALL	WriteInt;																//Writes the integer in register eax.
 00000112  BA 000000CA R			MOV		edx,				offset diff;										//Move memory address of diff in register edx.
 00000117  E8 00000000 E			CALL	WriteString;															//Writes the String in register edx.
 0000011C  A1 001E8570 R			MOV		eax,				secondNum;											//Move value of secondNum in register eax.
 00000121  E8 00000000 E			CALL	WriteInt;																//Writes the integer in register eax.
 00000126  BA 000000C2 R			MOV		edx,				offset equals;										//Move memory address of equals in register edx.
 0000012B  E8 00000000 E			CALL	WriteString;															//Writes the String in register edx.
				;																					//Print result:
 00000130  A1 001E8578 R			MOV		eax,				result;												//Move value of result in register eax.
 00000135  E8 00000000 E			CALL	WriteInt;																//Writes the integer in register eax.
				;																					//Jump to loop.
 0000013A  E8 00000000 E			CALL	CrLf;																	//New Line.
 0000013F  E9 000001D7				JMP		JumpToLoop;																//Jump to JumpToLoop.

 00000144				Multiplication:;																//Multiplication (3):
				;																					//Calculation:
 00000144  A1 001E856C R			MOV		eax,				firstNum;											//Move value of firstNum in register eax.
 00000149  8B 1D 001E8570 R			MOV		ebx,				secondNum;											//Move value of secondNum in register ebx.
 0000014F  F7 E3				MUL		ebx;																	//Multiplies the value in eax with the value in ebx.
 00000151  A3 001E8578 R			MOV		result,				eax;												//Stores value of eax in result.
				;																					//Print equation:
 00000156  A1 001E856C R			MOV		eax,				firstNum;											//Move value of firstNum in register eax.
 0000015B  E8 00000000 E			CALL	WriteInt;																//Writes the integer in register eax.
 00000160  BA 000000CE R			MOV		edx,				offset multi;										//Move memory address of multi in register edx.
 00000165  E8 00000000 E			CALL	WriteString;															//Writes the String in register edx.
 0000016A  A1 001E8570 R			MOV		eax,				secondNum;											//Move value of secondNum in register eax.
 0000016F  E8 00000000 E			CALL	WriteInt;																//Writes the integer in register eax.
 00000174  BA 000000C2 R			MOV		edx,				offset equals;										//Move memory address of equals in register edx.
 00000179  E8 00000000 E			CALL	WriteString;															//Writes the String in register edx.
				;																					//Print result:
 0000017E  A1 001E8578 R			MOV		eax,				result;												//Move value of result in register eax.
 00000183  E8 00000000 E			CALL	WriteInt;																//Writes the integer in register eax.
				;																					//Jump to loop.
 00000188  E8 00000000 E			CALL	CrLf;																	//New Line.
 0000018D  E9 00000189				JMP		JumpToLoop;																//Jump to JumpToLoop.

 00000192				Division:;																		//Division (4):
				;																					//Checks if numbers can be divided:
 00000192  BA 0000007A R			MOV		edx,				offset cannotDivide;								//Move memory address of cannotDivide in register edx.
 00000197  A1 001E856C R			MOV		eax,				firstNum;											//Move value of firstNum in register eax.
 0000019C  83 F8 00				CMP		eax,				0;													//Compare eax with 0.
 0000019F  0F 8E 0000019C			JLE		InvalidResponse;														//Jump to InvalidResponse if less than or equal to 0.
 000001A5  A1 001E8570 R			MOV		eax,				secondNum;											//Move value of secondNum in register eax.
 000001AA  83 F8 00				CMP		eax,				0;													//Compare eax with 0.
 000001AD  0F 8E 0000018E			JLE		InvalidResponse;														//Jump to InvalidResponse if less than or equal to 0.
				;																					//Calculation:
 000001B3  D9 05 001E856C R			FLD		firstNum;																//Load firstNum into ST(0).
 000001B9  D8 35 001E8570 R			FDIV	secondNum;																//Divide firstNum by secondNum.
 000001BF  DA 0D 000000E0 R			FIMUL	precision;																//Multiplies value by precision.
 000001C5  D9 FC				FRNDINT;																		//Rounds the value in ST(0) to the nearest integral value.
 000001C7  DB 15 001E8574 R			FIST	bigInt;																	//Stores integer in bigInt.
 000001CD  D9 15 001E857C R			FST		resultDiv;																//Stores value of ST(0) in resultDiv.
				;																					//Print equation:
 000001D3  A1 001E856C R			MOV		eax,				firstNum;											//Move value of firstNum in register eax.
 000001D8  E8 00000000 E			CALL	WriteInt;																//Writes the integer in register eax.
 000001DD  BA 000000D2 R			MOV		edx,				offset divi;										//Move memory address of divi in register edx.
 000001E2  E8 00000000 E			CALL	WriteString;															//Writes the String in register edx.
 000001E7  A1 001E8570 R			MOV		eax,				secondNum;											//Move value of secondNum in register eax.
 000001EC  E8 00000000 E			CALL	WriteInt;																//Writes the integer in register eax.
 000001F1  BA 000000C2 R			MOV		edx,				offset equals;										//Move memory address of equals in register edx.
 000001F6  E8 00000000 E			CALL	WriteString;															//Writes the String in register edx.
				;																					//Calculate first part of result:
 000001FB  BA 00000000				MOV		edx,				0;													//Move 0 in register edx.
 00000200  A1 001E8574 R			MOV		eax,				bigInt;												//Move value of bigInt in register eax.
 00000205  99					CDQ;																			//Sign-extend eax to edx.
 00000206  8B 1D 000000E0 R			MOV		ebx,				precision;											//Move value of precision in register ebx.
 0000020C  99					CDQ;																			//Sign-extend eax to edx.
 0000020D  F7 F3				DIV		ebx;																	//Divides eax by ebx.
 0000020F  A3 001E8580 R			MOV		firstPart,			eax;												//Stores value of eax in firstPart.
 00000214  89 15 001E8588 R			MOV		remainder,			edx;												//Stores value of edx in remainder.
				;																					//Print first part of result:
 0000021A  A1 001E8580 R			MOV		eax,				firstPart;											//Move value of firstPart in register eax.
 0000021F  E8 00000000 E			CALL	WriteInt;																//Writes the integer in register eax.
 00000224  BA 000000D6 R			MOV		edx,				offset dot;											//Move memory address of dot in register edx.					
 00000229  E8 00000000 E			CALL	WriteString;															//Writes the String in register edx.
				;																					//Calculate second part of result:
 0000022E  A1 001E8580 R			MOV		eax,				firstPart;											//Move value of firstPart in register eax.
 00000233  F7 25 000000E0 R			MUL		precision;																//Multiply eax by precision.
 00000239  A3 001E858C R			MOV		temp,				eax;												//Stores value of eax in temp.
 0000023E  A1 001E8574 R			MOV		eax,				bigInt;												//Move value of bigInt in register eax.
 00000243  2B 05 001E858C R			SUB		eax,				temp;												//Subtracts the value of temp from register eax.
				;																					//Print second part of result:
 00000249  A3 001E8584 R			MOV		secondPart,			eax;												//Stores the value of eax in secondPart.
 0000024E  E8 00000000 E			CALL	WriteDec;																//Writes the integer in register eax.
				;																					//Jump to loop.
 00000253  E8 00000000 E			CALL	CrLf;																	//New Line.
 00000258  E9 000000BE				JMP		JumpToLoop;																//Jump to JumpToLoop.


 0000025D				PrimeNumbers:;																	//Prime number generation (5):
 0000025D  8B 0D 001E8568 R			MOV		ecx,				num;												//Move value of num in register ecx.
 00000263  BA 0000009E R			MOV		edx,				offset numberTooLarge;								//Move memory address of numberTooLarge in register edx.
 00000268  81 F9 0007A120			CMP		ecx,				arraySize;											//Compare ecx with arraySize.
 0000026E  0F 8F 000000CD			JG		InvalidResponse;														//Jump to InvalidResponse if greater than arraySize.

 00000274  83 F9 02				CMP		ecx,				2;													//Compare ecx to 2.
 00000277  7E 09				JLE		startPrime;																//Jump to startPrime if 
 00000279  83 E9 01				SUB		ecx,				1;													//Subtracts the value of 1 from register ecx.
 0000027C  89 0D 001E8568 R			MOV		num,				ecx;												//Stores value of ecx in num.

 00000282				startPrime:;																	//Start the Prime Number Generation:
 00000282  33 C9				XOR		ecx,				ecx;												//Performs xor operation on ecx and ecx, zeroing it.

 00000284				fillArray:;																		//Fills the arrays with sequential values:
 00000284  8B C1				MOV		eax,				ecx;												//Move value of ecx in register eax.
 00000286  83 C0 02				ADD		eax,				2;													//Adds the value of 2 to register eax.
 00000289  89 04 8D				MOV		[array1 + 4 * ecx], eax;												//Move value of eax in address [array1 + 4 * ecx].
	   000000E4 R
 00000290  41					INC		ecx;																	//Increment ecx.
 00000291  3B 0D 001E8568 R			CMP		ecx,				num;												//Compare ecx to num.
 00000297  72 EB				JB		fillArray;																//Jump to fillArray if below num.

 00000299  33 C9				XOR		ecx,				ecx;												//Performs xor operation on ecx and ecx, zeroing it.

 0000029B				outerPrime:;;																	//The outer loop for prime number calculation:
 0000029B  8B D9				MOV		ebx,				ecx;												//Move value of ecx to register ebx.
 0000029D  43					INC		ebx;																	//Increment ebx.
 0000029E  83 3C 8D				CMP		[array1 + 4 * ecx], -1;													//Compare [array1 + 4 * ecx] to -1.
	   000000E4 R FF
 000002A6  75 0B				JNE		innerPrime;																//Jump to innerPrime if less than -1.
 000002A8				resumeOuter:;																	//Resume outerPrime:
 000002A8  41					INC		ecx;																	//Increment ecx.
 000002A9  3B 0D 001E8568 R			CMP		ecx,				num;												//Compare ecx to num.
 000002AF  72 EA				JB		outerPrime;																//Jump to outerPrime if below num.
 000002B1  EB 39				JMP		endPrime;																//Jump to endPrime when complete.

 000002B3				innerPrime:;																	//The inner loop for prime number calculation:	
 000002B3  83 3C 9D				CMP		[array1 + 4 * ebx], -1;													//Compare [array1 + 4 * ebx] to -1.
	   000000E4 R FF
 000002BB  75 0B				JNE		checkPrime;																//Jump to checkPrime if not equal.
 000002BD				resumeInner:;																	//Resume innerPrime:
 000002BD  43					INC		ebx;																	//Increment ebx.
 000002BE  3B 1D 001E8568 R			CMP		ebx,				num;												//Compare ebx to num.
 000002C4  72 ED				JB		innerPrime;																//Jump to innerPrime if below num.
 000002C6  EB E0				JMP		resumeOuter;															//Jump to resumeOuter when complete.

 000002C8				checkPrime:;																	//Checks if number is a prime:
 000002C8  33 D2				XOR		edx,				edx;												//Performs xor operation on edx and edx, zeroing it.
 000002CA  8B 04 9D				MOV		eax,				[array1 + 4 * ebx];									//Move value of [array1 + 4 * ebx] to eax.
	   000000E4 R
 000002D1  F7 34 8D				DIV		[array1 + 4 * ecx];														//Divide eax by [array1 + 4 * ecx].
	   000000E4 R
 000002D8  83 FA 00				CMP		edx,				0;													//Compare the remainder to 0.
 000002DB  74 02				JE		notPrime;																//Jump to notPrime if equal.
 000002DD				resume3:;																		//Resume checkPrime:
 000002DD  EB DE				JMP		resumeInner;															//Jump to resumeInner.

 000002DF				notPrime:;																		//Flags a number as not prime:
 000002DF  C7 04 9D				MOV		[array1 + 4 * ebx], -1;													//Moves value of -1 in address [array1 + 4 * ebx].
	   000000E4 R
	   FFFFFFFF
 000002EA  EB F1				JMP		resume3;																//Jump to resume3.

 000002EC				endPrime:;																		//End the prime number generation:
 000002EC  33 C9				XOR		ecx,				ecx;												//Performs xor operation on ecx and ecx, zeroing it.

 000002EE				printArrayElement:;																//Prints the array element:
 000002EE  8B 04 8D				MOV		eax,				[array1 + 4 * ecx];									//Move value of [array1 + 4 * ecx] in register eax.
	   000000E4 R
 000002F5  E8 00000000 E			CALL	WriteDec;																//Writes the integer in register eax.
 000002FA  E8 00000000 E			CALL	CrLf;																	//New Line.
 000002FF  EB 0A				JMP		resumePrint;															//Jump to resumePrint.
 00000301				printArray:;																	//Print the array:
 00000301  83 3C 8D				CMP		[array1 + 4 * ecx], -1;													//Compare [array1 + 4 * ecx] to -1.
	   000000E4 R FF
 00000309  75 E3				JNE		printArrayElement;														//Jump to printArrayElement if not equal to -1.
 0000030B				resumePrint:;																	//Resumes the printing of the array:
 0000030B  41					INC		ecx;																	//Increment ecx.
 0000030C  3B 0D 001E8568 R			CMP		ecx,				num;												//Compare ecx to num.
 00000312  72 ED				JB		printArray;																//Jump to printArray if below num.
				;																					//Jump to loop.
 00000314  E8 00000000 E			CALL	CrLf;																	//New Line.
 00000319  EB 00				JMP		JumpToLoop;																//Jump to JumpToLoop.


 0000031B				JumpToLoop:;																	//Loops until user quits:
 0000031B  BA 00000035 R			MOV		edx,				offset loop_prompt;									//Move memory address of loop_response in register edx.
 00000320  E8 00000000 E			CALL	WriteString;															//Writes the String in register edx.
 00000325  E8 00000000 E			CALL	ReadInt;																//Reads an integer to register eax.

 0000032A  BA 0000006B R			MOV		edx,				offset invalid;										//Move memory address of invalid in register edx.

 0000032F  83 F8 00				CMP		eax,				0;													//Compares eax to 0.
 00000332  74 19				JE		ExitProgram;															//Jump to ExitProgram if equal to 0.
 00000334  7C 0B				JL		InvalidResponse;														//Jump to InvalidResponse if less than 0.

 00000336  83 F8 01				CMP		eax,				1;													//Compares eax to 1.
 00000339  0F 84 FFFFFCC1			JE		ReadInput;																//Jump to ReadInput if equal to 1.
 0000033F  7C 00				JL		InvalidResponse;														//Jump to InvalidResponse if greater than 1.


 00000341				InvalidResponse:;																//Invalid response:
 00000341  E8 00000000 E			CALL	WriteString;															//Writes the String in register edx.
 00000346  E8 00000000 E			CALL	CrLf;																	//New Line.
 0000034B  EB CE				JMP		JumpToLoop;																//Jump to JumpToLoop.8


 0000034D				ExitProgram:;																	//Exits the program:
 0000034D  BA 000000B9 R			MOV		edx,				offset goodbye;										//Move memory address of goodbye in register edx.
 00000352  E8 00000000 E			CALL	WriteString;															//Writes the String in register edx.
 00000357  E8 00000000 E			CALL	CrLf;																	//New Line.
						exit;																			//Exits the program.
 0000035C  6A 00	   *	    push   +000000000h
 0000035E  E8 00000000 E   *	    call   ExitProcess


 00000363			main	ENDP;																		//End main procedure.


				END		main;																		//End program.
Microsoft (R) Macro Assembler Version 14.14.26428.1	    05/17/18 17:52:33
Assembly x86 Calculato					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 001E8590 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000363 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000363 Public STDCALL
  ReadInput  . . . . . . . . . .	L Near	 00000000 _TEXT	
  GetOperation . . . . . . . . .	L Near	 00000000 _TEXT	
  CheckOperator  . . . . . . . .	L Near	 00000014 _TEXT	
  UnaryOperations  . . . . . . .	L Near	 00000041 _TEXT	
  BinaryOperations . . . . . . .	L Near	 00000063 _TEXT	
  Addition . . . . . . . . . . .	L Near	 000000AC _TEXT	
  Subtraction  . . . . . . . . .	L Near	 000000F8 _TEXT	
  Multiplication . . . . . . . .	L Near	 00000144 _TEXT	
  Division . . . . . . . . . . .	L Near	 00000192 _TEXT	
  PrimeNumbers . . . . . . . . .	L Near	 0000025D _TEXT	
  startPrime . . . . . . . . . .	L Near	 00000282 _TEXT	
  fillArray  . . . . . . . . . .	L Near	 00000284 _TEXT	
  outerPrime . . . . . . . . . .	L Near	 0000029B _TEXT	
  resumeOuter  . . . . . . . . .	L Near	 000002A8 _TEXT	
  innerPrime . . . . . . . . . .	L Near	 000002B3 _TEXT	
  resumeInner  . . . . . . . . .	L Near	 000002BD _TEXT	
  checkPrime . . . . . . . . . .	L Near	 000002C8 _TEXT	
  resume3  . . . . . . . . . . .	L Near	 000002DD _TEXT	
  notPrime . . . . . . . . . . .	L Near	 000002DF _TEXT	
  endPrime . . . . . . . . . . .	L Near	 000002EC _TEXT	
  printArrayElement  . . . . . .	L Near	 000002EE _TEXT	
  printArray . . . . . . . . . .	L Near	 00000301 _TEXT	
  resumePrint  . . . . . . . . .	L Near	 0000030B _TEXT	
  JumpToLoop . . . . . . . . . .	L Near	 0000031B _TEXT	
  InvalidResponse  . . . . . . .	L Near	 00000341 _TEXT	
  ExitProgram  . . . . . . . . .	L Near	 0000034D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array1 . . . . . . . . . . . . .	DWord	 000000E4 _DATA	
arraySize  . . . . . . . . . . .	Number	 0007A120h   
bigInt . . . . . . . . . . . . .	DWord	 001E8574 _DATA	
binaryOpts . . . . . . . . . . .	DWord	 000000DC _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cannotDivide . . . . . . . . . .	Byte	 0000007A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
diff . . . . . . . . . . . . . .	Byte	 000000CA _DATA	
divi . . . . . . . . . . . . . .	Byte	 000000D2 _DATA	
dot  . . . . . . . . . . . . . .	Byte	 000000D6 _DATA	
equals . . . . . . . . . . . . .	Byte	 000000C2 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
firstNum . . . . . . . . . . . .	DWord	 001E856C _DATA	
firstPart  . . . . . . . . . . .	DWord	 001E8580 _DATA	
goodbye  . . . . . . . . . . . .	Byte	 000000B9 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
invalid  . . . . . . . . . . . .	Byte	 0000006B _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
loop_prompt  . . . . . . . . . .	Byte	 00000035 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
multi  . . . . . . . . . . . . .	Byte	 000000CE _DATA	
numberTooLarge . . . . . . . . .	Byte	 0000009E _DATA	
num  . . . . . . . . . . . . . .	DWord	 001E8568 _DATA	
opt  . . . . . . . . . . . . . .	DWord	 001E8564 _DATA	
precision  . . . . . . . . . . .	DWord	 000000E0 _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt_2 . . . . . . . . . . . .	Byte	 0000000C _DATA	
prompt_3 . . . . . . . . . . . .	Byte	 0000001C _DATA	
prompt_4 . . . . . . . . . . . .	Byte	 0000002C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
remainder  . . . . . . . . . . .	DWord	 001E8588 _DATA	
resultDiv  . . . . . . . . . . .	DWord	 001E857C _DATA	
result . . . . . . . . . . . . .	DWord	 001E8578 _DATA	
secondNum  . . . . . . . . . . .	DWord	 001E8570 _DATA	
secondPart . . . . . . . . . . .	DWord	 001E8584 _DATA	
sum  . . . . . . . . . . . . . .	Byte	 000000C6 _DATA	
temp . . . . . . . . . . . . . .	DWord	 001E858C _DATA	
totalOpts  . . . . . . . . . . .	DWord	 000000D8 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
