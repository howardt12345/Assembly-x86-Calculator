Microsoft (R) Macro Assembler Version 14.13.26132.0	    05/08/18 14:48:55
Assembly x86 Calculato					     Page 1 - 1


				TITLE			Assembly x86 Calculator;					//The Title.

				INCLUDE			Irvine32.inc;								//Includes the Irvine32 Library.
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
				;															//Strings:
 00000000 4F 70 65 72 61	prompt_1		BYTE	"Operation (1 for add, 2 for subtract, 3 for multiply, 4 for divide): ", 0;	//Prompt for operation.
	   74 69 6F 6E 20
	   28 31 20 66 6F
	   72 20 61 64 64
	   2C 20 32 20 66
	   6F 72 20 73 75
	   62 74 72 61 63
	   74 2C 20 33 20
	   66 6F 72 20 6D
	   75 6C 74 69 70
	   6C 79 2C 20 34
	   20 66 6F 72 20
	   64 69 76 69 64
	   65 29 3A 20 00
 00000046 46 69 72 73 74	prompt_2		BYTE	"First Number:  ",		0;				//Prompt for first number.
	   20 4E 75 6D 62
	   65 72 3A 20 20
	   00
 00000056 53 65 63 6F 6E	prompt_3		BYTE	"Second Number: ",		0;				//Prompt for second number.
	   64 20 4E 75 6D
	   62 65 72 3A 20
	   00
 00000066 4E 75 6D 62 65	prompt_4		BYTE	"Number: ",				0;				//Prompt for prime number generation.
	   72 3A 20 00
 0000006F 57 6F 75 6C 64	loop_prompt		BYTE	"Would you like to perform another calculation? 1 for YES or 0 for NO: ",	0;	//Prompt for loop.
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 70 65
	   72 66 6F 72 6D
	   20 61 6E 6F 74
	   68 65 72 20 63
	   61 6C 63 75 6C
	   61 74 69 6F 6E
	   3F 20 31 20 66
	   6F 72 20 59 45
	   53 20 6F 72 20
	   30 20 66 6F 72
	   20 4E 4F 3A 20
	   00
 000000B6 49 6E 76 61 6C	invalid			BYTE	"Invalid input.",		0;				//Invalid input.
	   69 64 20 69 6E
	   70 75 74 2E 00
 000000C5 4E 75 6D 62 65	cannotDivide	BYTE	"Numbers cannot be negative or zero.",		0;									//Cannot divide numbers error.
	   72 73 20 63 61
	   6E 6E 6F 74 20
	   62 65 20 6E 65
	   67 61 74 69 76
	   65 20 6F 72 20
	   7A 65 72 6F 2E
	   00
 000000E9 47 6F 6F 64 62	goodbye			BYTE	"Goodbye.",				0;				//Goodbye message.
	   79 65 2E 00

 000000F2 20 3D 20 00		equals			BYTE	" = ", 0;								//String for equals symbol.
 000000F6 20 2B 20 00		sum				BYTE	" + ", 0;								//String for addition symbol.
 000000FA 20 2D 20 00		diff			BYTE	" - ", 0;								//String for subtraction symbol.
 000000FE 20 2A 20 00		multi			BYTE	" * ", 0;								//String for multiplication symbol.
 00000102 20 2F 20 00		divi			BYTE	" / ", 0;								//String for division symbol.
 00000106 2E 00			dot				BYTE	"."	 , 0;								//String for decimal point.

				;															//Predefined values:
 00000108 00000005		totalOpts		DWORD	5		;								//The number of operations.
 0000010C 00000004		binaryOpts		DWORD	4		;								//The number of binary operations.
 00000110 000F4240		precision		DWORD	1000000	;								//The precision of the floating point number result.

				;															//User inputted data:
 00000114 00000000		opt				DWORD	?		;								//The operator.
 00000118 00000000		num				DWORD	?		;								//The number (unary operations).
 0000011C 00000000		firstNum		DWORD	?		;								//The first number (binary operations).
 00000120 00000000		secondNum		DWORD	?		;								//The second number (binary operations).
				;															//Calculated results:
 00000124 00000000		bigInt			DWORD	0		;								//The floating point number multiplied by precision.
 00000128 00000000		result			DWORD	?		;								//The Result.
 0000012C 00000000		resultDiv		REAL4	?		;								//The Result of division.
 00000130 00000000		firstPart		DWORD	?		;								//The part of the quotient before the decimal place.
 00000134 00000000		secondPart		DWORD	?		;								//The part of the quotient after the decimal place.
 00000138 00000000		remainder		DWORD	?		;								//The remainder of the first part of the quotient.
 0000013C 00000000		temp			DWORD	?		;								//Temporary value used in the calculation of the second part of the quotient.

 00000000			.code

 00000000			main	PROC;												//The main procedure.
					
 00000000				ReadInput:;												//Reading data:
 00000000				GetOperation:;											//Read Operation:
 00000000  BA 00000000 R			MOV		edx,			offset prompt_1;				//Puts memory address of prompt_3 in register edx.
 00000005  E8 00000000 E			CALL	WriteString;									//Writes the String in register edx.
 0000000A  E8 00000000 E			CALL	ReadInt;										//Reads an integer to register eax.
 0000000F  A3 00000114 R			MOV		opt,			eax;							//Stores value of eax in opt.	


 00000014				CheckOperator:;										//Check the operator:
 00000014  A1 00000114 R			MOV		eax,			opt;							//Puts value of opt in register eax.
 00000019  8B 1D 00000108 R			MOV		ebx,			totalOpts;						//Puts value of totalOpts in register ebx.
 0000001F  8B 0D 0000010C R			MOV		ecx,			binaryOpts;						//Puts value of binaryOpts in register ecx.
 00000025  BA 000000B6 R			MOV		edx,			offset invalid;					//Puts memory address of invalid in register edx.
				;		//Check if opt is within bounds.
 0000002A  83 F8 00				CMP		eax,			0;								//Compare eax to 0.
 0000002D  0F 8E 00000259			JLE		InvalidResponse;								//Jumps to InvalidResponse if less than or equal to 0.
 00000033  3B C3				CMP		eax,			ebx;							//Compare eax to ebx.
 00000035  0F 8F 00000251			JG		InvalidResponse;								//Jumps to InvalidResponse if greater than ebx.
				;		//Checks if opt is binary or unary operation:
 0000003B  3B C1				CMP		eax,			ecx;							//Compare eax to ebx.
 0000003D  7E 1F				JLE		BinaryOperations;								//Jumps to BinaryOperations if less than or equal to ecx.
 0000003F  7F 00				JG		UnaryOperations;								//Jumps to UnaryOperations if greater than ecx.

 00000041				UnaryOperations:;										//Unary calculator operations:
				;		//Get Number:
 00000041  BA 00000066 R			MOV		edx,			offset prompt_4;				//Puts memory address of prompt_1 in register edx.
 00000046  E8 00000000 E			CALL	WriteString;									//Writes the String in register edx.
 0000004B  E8 00000000 E			CALL	ReadInt;										//Reads an integer to register eax.
 00000050  A3 00000118 R			MOV		num,			eax;							//Stores value of eax in num.
				;		//Jump to operation:
 00000055  83 F8 05				CMP		eax,			5;								//Compare eax to 5.
 00000058  0F 84 000001F7			JE		PrimeGeneration;								//Jump to PrimeGeneration if equal to 5.

 0000005E				BinaryOperations:;										//Binary calculator operations:
				;		//Get first number:
 0000005E  BA 00000046 R			MOV		edx,			offset prompt_2;				//Puts memory address of prompt_1 in register edx.
 00000063  E8 00000000 E			CALL	WriteString;									//Writes the String in register edx.
 00000068  E8 00000000 E			CALL	ReadInt;										//Reads an integer to register eax.
 0000006D  A3 0000011C R			MOV		firstNum,		eax;							//Stores value of eax in firstNum.
				;		//Get second number:
 00000072  BA 00000056 R			MOV		edx,			offset prompt_3;				//Puts memory address of prompt_2 in register edx.
 00000077  E8 00000000 E			CALL	WriteString;									//Writes the String in register edx.
 0000007C  E8 00000000 E			CALL	ReadInt;										//Reads an integer to register eax.
 00000081  A3 00000120 R			mov		secondNum,		eax;							//Stores value of eax in secondNum.
				;		//Jump to operation:
 00000086  A1 00000114 R			MOV		eax,			opt;							//Puts value of opt in register eax.

 0000008B  83 F8 01				CMP		eax,			1;								//Compare eax to 1.
 0000008E  74 17				JE		Addition;										//Jump to Addition if equal to 1.

 00000090  83 F8 02				CMP		eax,			2;								//Compare eax to 2.
 00000093  74 5E				JE		Subtraction;									//Jump to Subtraction if equal to 2.

 00000095  83 F8 03				CMP		eax,			3;								//Compare eax to 3.
 00000098  0F 84 000000A1			JE		Multiplication;									//Jump to Multiplication if equal.

 0000009E  83 F8 04				CMP		eax,			4;								//Compare eax to 4.
 000000A1  0F 84 000000E6			JE		Division;										//Jump to Division if equal.

 000000A7				Addition:;												//Addition:
				;		//Calculation:
 000000A7  A1 0000011C R			MOV		eax,			firstNum;						//Puts value of firstNum in register eax.
 000000AC  03 05 00000120 R			ADD		eax,			secondNum;						//Adds the value of secondNum to register eax.
 000000B2  A3 00000128 R			MOV		result,			eax;							//Stores value of eax in result.
				;		//Print equation:
 000000B7  A1 0000011C R			MOV		eax,			firstNum;						//Puts value of firstNum in register eax.
 000000BC  E8 00000000 E			CALL	WriteInt;										//Writes the integer in register eax.
 000000C1  BA 000000F6 R			MOV		edx,			offset sum;						//Puts memory address of sum in register edx.
 000000C6  E8 00000000 E			CALL	WriteString;									//Writes the String in register edx.
 000000CB  A1 00000120 R			MOV		eax,			secondNum;						//Puts value of secondNum in register eax.
 000000D0  E8 00000000 E			CALL	WriteInt;										//Writes the integer in register eax.
 000000D5  BA 000000F2 R			MOV		edx,			offset equals;					//Puts memory address of equals in register edx.
 000000DA  E8 00000000 E			CALL	WriteString;									//Writes the String in register edx.
				;		//Print result:
 000000DF  A1 00000128 R			MOV		eax,			result;							//Puts value of result in register eax.
 000000E4  E8 00000000 E			CALL	WriteInt;										//Writes the integer in register eax.
				;		//Jump to loop.
 000000E9  E8 00000000 E			CALL	CrLf;											//New Line.
 000000EE  E9 00000173				JMP		JumpToLoop;										//Jump to JumpToLoop.

 000000F3				Subtraction:;											//Subtraction:
				;		//Calculation:
 000000F3  A1 0000011C R			MOV		eax,			firstNum;						//Puts value of firstNum in register eax.
 000000F8  2B 05 00000120 R			SUB		eax,			secondNum;						//Subtracts the value of secondNum from register eax.
 000000FE  A3 00000128 R			MOV		result,			eax;							//Stores value of eax in result.
				;		//Print equation:
 00000103  A1 0000011C R			MOV		eax,			 firstNum;						//Puts value of firstNum in register eax.
 00000108  E8 00000000 E			CALL	WriteInt;										//Writes the integer in register eax.
 0000010D  BA 000000FA R			MOV		edx,			offset diff;					//Puts memory address of diff in register edx.
 00000112  E8 00000000 E			CALL	WriteString;									//Writes the String in register edx.
 00000117  A1 00000120 R			MOV		eax,			secondNum;						//Puts value of secondNum in register eax.
 0000011C  E8 00000000 E			CALL	WriteInt;										//Writes the integer in register eax.
 00000121  BA 000000F2 R			MOV		edx,			offset equals;					//Puts memory address of equals in register edx.
 00000126  E8 00000000 E			CALL	WriteString;									//Writes the String in register edx.
				;		//Print result:
 0000012B  A1 00000128 R			MOV		eax,			result;							//Puts value of result in register eax.
 00000130  E8 00000000 E			CALL	WriteInt;										//Writes the integer in register eax.
				;		//Jump to loop.
 00000135  E8 00000000 E			CALL	CrLf;											//New Line.
 0000013A  E9 00000127				JMP		JumpToLoop;										//Jump to JumpToLoop.

 0000013F				Multiplication:;										//Multiplication:
				;		//Calculation:
 0000013F  A1 0000011C R			MOV		eax,			firstNum;						//Puts value of firstNum in register eax.
 00000144  8B 1D 00000120 R			MOV		ebx,			secondNum;						//Puts value of secondNum in register ebx.
 0000014A  F7 E3				MUL		ebx;											//Multiplies the value in eax with the value in ebx.
 0000014C  A3 00000128 R			MOV		result,			eax;							//Stores value of eax in result.
				;		//Print equation:
 00000151  A1 0000011C R			MOV		eax,			firstNum;						//Puts value of firstNum in register eax.
 00000156  E8 00000000 E			CALL	WriteInt;										//Writes the integer in register eax.
 0000015B  BA 000000FE R			MOV		edx,			offset multi;					//Puts memory address of multi in register edx.
 00000160  E8 00000000 E			CALL	WriteString;									//Writes the String in register edx.
 00000165  A1 00000120 R			MOV		eax,			secondNum;						//Puts value of secondNum in register eax.
 0000016A  E8 00000000 E			CALL	WriteInt;										//Writes the integer.
 0000016F  BA 000000F2 R			MOV		edx,			offset equals;					//Puts memory address of equals in register edx.
 00000174  E8 00000000 E			CALL	WriteString;									//Writes the String in register edx.
				;		//Print result:
 00000179  A1 00000128 R			MOV		eax,			result;							//Puts value of result in register eax.
 0000017E  E8 00000000 E			CALL	WriteInt;										//Writes the integer in register eax.
				;		//Jump to loop.
 00000183  E8 00000000 E			CALL	CrLf;											//New Line.
 00000188  E9 000000D9				JMP		JumpToLoop;										//Jump to JumpToLoop.

 0000018D				Division:;												//Division:
				;		//Checks if numbers can be divided:
 0000018D  BA 000000C5 R			MOV		edx,			offset cannotDivide;			//Puts memory address of cannotDivide in register edx.
 00000192  A1 0000011C R			MOV		eax,			firstNum;						//Puts value of firstNum in register eax.
 00000197  83 F8 00				CMP		eax,			0;								//Compare eax with 0.
 0000019A  0F 8E 000000EC			JLE		InvalidResponse;								//Jumps to InvalidResponse if less than or equal to 0.
 000001A0  A1 00000120 R			MOV		eax,			secondNum;						//Puts value of secondNum in register eax.
 000001A5  83 F8 00				CMP		eax,			0;								//Compare eax with 0.
 000001A8  0F 8E 000000DE			JLE		InvalidResponse;								//Jumps to InvalidResponse if less than or equal to 0.
				;		//Calculation:
 000001AE  D9 05 0000011C R			FLD		firstNum;										//Load firstNum into ST(0).
 000001B4  D8 35 00000120 R			FDIV	secondNum;										//Divide firstNum by secondNum.
 000001BA  DA 0D 00000110 R			FIMUL	precision;										//Multiplies value by precision.
 000001C0  D9 FC				FRNDINT;												//Rounds the value in ST(0) to the nearest integral value.
 000001C2  DB 15 00000124 R			FIST	bigInt;											//Stores integer in bigInt.
 000001C8  D9 15 0000012C R			FST		resultDiv;										//Stores value of ST(0) in resultDiv.
				;		//Print equation:
 000001CE  A1 0000011C R			MOV		eax,			firstNum;						//Puts value of firstNum in register eax.
 000001D3  E8 00000000 E			CALL	WriteInt;										//Writes the integer in register eax.
 000001D8  BA 00000102 R			MOV		edx,			offset divi;					//Puts memory address of divi in register edx.
 000001DD  E8 00000000 E			CALL	WriteString;									//Writes the String in register edx.
 000001E2  A1 00000120 R			MOV		eax,			secondNum;						//Puts value of secondNum in register eax.
 000001E7  E8 00000000 E			CALL	WriteInt;										//Writes the integer in register eax.
 000001EC  BA 000000F2 R			MOV		edx,			offset equals;					//Puts memory address of equals in register edx.
 000001F1  E8 00000000 E			CALL	WriteString;									//Writes the String in register edx.
				;		//Calculate first part of result:
 000001F6  BA 00000000				MOV		edx,			0;								//Puts 0 in register edx.
 000001FB  A1 00000124 R			MOV		eax,			bigInt;							//Puts value of bigInt in register eax.
 00000200  99					CDQ;													//Sign-extend eax to edx.
 00000201  8B 1D 00000110 R			MOV		ebx,			precision;						//Puts value of precision in register ebx.
 00000207  99					CDQ;													//Sign-extend eax to edx.
 00000208  F7 F3				DIV		ebx;											//Divides eax by ebx.
 0000020A  A3 00000130 R			MOV		firstPart,		eax;							//Stores value of eax in firstPart.
 0000020F  89 15 00000138 R			MOV		remainder,		edx;							//Stores value of edx in remainder.
				;		//Print first part of result:
 00000215  A1 00000130 R			MOV		eax,			firstPart;						//Puts value of firstPart in register eax.
 0000021A  E8 00000000 E			CALL	WriteInt;										//Writes the integer in register eax.
 0000021F  BA 00000106 R			MOV		edx,			offset dot;						//Puts memory address of dot in register edx.					
 00000224  E8 00000000 E			CALL	WriteString;									//Writes the String in register edx.
				;		//Calculate second part of result:
 00000229  A1 00000130 R			MOV		eax,			firstPart;						//Puts value of firstPart in register eax.
 0000022E  F7 25 00000110 R			MUL		precision;										//Multiply eax by precision.
 00000234  A3 0000013C R			MOV		temp,			eax;							//Stores value of eax in temp.
 00000239  A1 00000124 R			MOV		eax,			bigInt;							//Puts value of bigInt in register eax.
 0000023E  2B 05 0000013C R			SUB		eax,			temp;							//Subtracts the value of temp from register eax.
				;		//Print second part of result:
 00000244  A3 00000134 R			MOV		secondPart,		eax;							//Stores the value of eax in secondPart.
 00000249  E8 00000000 E			CALL	WriteDec;										//Writes the integer in register eax.
				;		//Jump to loop.
 0000024E  E8 00000000 E			CALL	CrLf;											//New Line.
 00000253  EB 11				JMP		JumpToLoop;										//Jump to JumpToLoop.


 00000255				PrimeGeneration:;										//Prime number generation:
 00000255  A1 00000118 R			MOV		eax,			num;							//Puts value of num in register eax.
 0000025A  E8 00000000 E			CALL	WriteInt;										//Writes the integer in register eax.
				;		//Jump to loop.
 0000025F  E8 00000000 E			CALL	CrLf;											//New Line.
 00000264  EB 00				JMP		JumpToLoop;										//Jump to JumpToLoop.

 00000266				JumpToLoop:;											//Loops until user quits:
 00000266  BA 0000006F R			MOV		edx,			offset loop_prompt;				//Puts memory address of loop_response in register edx.
 0000026B  E8 00000000 E			CALL	WriteString;									//Writes the String in register edx.
 00000270  E8 00000000 E			CALL	ReadInt;										//Reads an integer to register eax.

 00000275  BA 000000B6 R			MOV		edx,			offset invalid;					//Puts memory address of invalid in register edx.

 0000027A  83 F8 00				CMP		eax,			0;								//Compares eax to 0.
 0000027D  74 19				JE		ExitProgram;									//Jumps to ExitProgram if equal to 0.
 0000027F  7C 0B				JL		InvalidResponse;								//Jumps to InvalidResponse if less than 0.

 00000281  83 F8 01				CMP		eax,			1;								//Compares eax to 1.
 00000284  0F 84 FFFFFD76			JE		ReadInput;										//Jump to ReadInput if equal to 1.
 0000028A  7C 00				JL		InvalidResponse;								//Jumps to InvalidResponse if greater than 1.


 0000028C				InvalidResponse:;										//Invalid response:
 0000028C  E8 00000000 E			CALL	WriteString;									//Writes the String in register edx.
 00000291  E8 00000000 E			CALL	CrLf;											//New Line.
 00000296  EB CE				JMP		JumpToLoop;										//Jump to JumpToLoop.


 00000298				ExitProgram:;											//Exits the program:
 00000298  BA 000000E9 R			MOV		edx,			offset goodbye;					//Puts memory address of goodbye in register edx.
 0000029D  E8 00000000 E			CALL	WriteString;									//Writes the String in register edx.
 000002A2  E8 00000000 E			CALL	CrLf;											//New Line.
						exit;													//Exits the program.
 000002A7  6A 00	   *	    push   +000000000h
 000002A9  E8 00000000 E   *	    call   ExitProcess


 000002AE			main	ENDP;												//End main procedure.


				END		main;											//End program.
Microsoft (R) Macro Assembler Version 14.13.26132.0	    05/08/18 14:48:55
Assembly x86 Calculato					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000140 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002AE Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000002AE Public STDCALL
  ReadInput  . . . . . . . . . .	L Near	 00000000 _TEXT	
  GetOperation . . . . . . . . .	L Near	 00000000 _TEXT	
  CheckOperator  . . . . . . . .	L Near	 00000014 _TEXT	
  UnaryOperations  . . . . . . .	L Near	 00000041 _TEXT	
  BinaryOperations . . . . . . .	L Near	 0000005E _TEXT	
  Addition . . . . . . . . . . .	L Near	 000000A7 _TEXT	
  Subtraction  . . . . . . . . .	L Near	 000000F3 _TEXT	
  Multiplication . . . . . . . .	L Near	 0000013F _TEXT	
  Division . . . . . . . . . . .	L Near	 0000018D _TEXT	
  PrimeGeneration  . . . . . . .	L Near	 00000255 _TEXT	
  JumpToLoop . . . . . . . . . .	L Near	 00000266 _TEXT	
  InvalidResponse  . . . . . . .	L Near	 0000028C _TEXT	
  ExitProgram  . . . . . . . . .	L Near	 00000298 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
bigInt . . . . . . . . . . . . .	DWord	 00000124 _DATA	
binaryOpts . . . . . . . . . . .	DWord	 0000010C _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cannotDivide . . . . . . . . . .	Byte	 000000C5 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
diff . . . . . . . . . . . . . .	Byte	 000000FA _DATA	
divi . . . . . . . . . . . . . .	Byte	 00000102 _DATA	
dot  . . . . . . . . . . . . . .	Byte	 00000106 _DATA	
equals . . . . . . . . . . . . .	Byte	 000000F2 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
firstNum . . . . . . . . . . . .	DWord	 0000011C _DATA	
firstPart  . . . . . . . . . . .	DWord	 00000130 _DATA	
goodbye  . . . . . . . . . . . .	Byte	 000000E9 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
invalid  . . . . . . . . . . . .	Byte	 000000B6 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
loop_prompt  . . . . . . . . . .	Byte	 0000006F _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
multi  . . . . . . . . . . . . .	Byte	 000000FE _DATA	
num  . . . . . . . . . . . . . .	DWord	 00000118 _DATA	
opt  . . . . . . . . . . . . . .	DWord	 00000114 _DATA	
precision  . . . . . . . . . . .	DWord	 00000110 _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt_2 . . . . . . . . . . . .	Byte	 00000046 _DATA	
prompt_3 . . . . . . . . . . . .	Byte	 00000056 _DATA	
prompt_4 . . . . . . . . . . . .	Byte	 00000066 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
remainder  . . . . . . . . . . .	DWord	 00000138 _DATA	
resultDiv  . . . . . . . . . . .	DWord	 0000012C _DATA	
result . . . . . . . . . . . . .	DWord	 00000128 _DATA	
secondNum  . . . . . . . . . . .	DWord	 00000120 _DATA	
secondPart . . . . . . . . . . .	DWord	 00000134 _DATA	
sum  . . . . . . . . . . . . . .	Byte	 000000F6 _DATA	
temp . . . . . . . . . . . . . .	DWord	 0000013C _DATA	
totalOpts  . . . . . . . . . . .	DWord	 00000108 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
